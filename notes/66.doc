# CI for Product Catalog ervice

name: CI for Product Catalog Service

on:
    push:
        branches: [ main ]
    pull_request:
        branches: [ main ]
jobs:
    build:
        runs-on: ubuntu-latest
        steps:
            - name: checkout code
              uses: actions/checkout@v4

            - name: setup Go 1.22
              uses: actions/setup-go@v2
              with:
                  go-version: 1.22

            - name: Build
              run: go build -o product-catalog-service src/product-catalog/main.go

            - name: unit tests
              run: go test src/product-catalog/...

    code-quality:
        runs-on: ubuntu-latest
        steps:
            - name: checkout code
              uses: actions/checkout@v4

            - name: Run golangci-lint
              run: |
                    go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
                    golangci-lint run src/product-catalog/...

    docker:
        runs-on: ubuntu-latest
        needs: build
        steps:
            - name: checkout code
              uses: actions/checkout@v4

            - name: Install Docker
              uses: docker/setup-buildx-action@v1

            - name: Login to Docker
              uses: docker/login-action@v3
              with:
                  username: ${{ secrets.DOCKER_USERNAME }}
                  password: ${{ secrets.DOCKER_PASSWORD }}

            - name: Docker Push
              uses: docker/build-push-action@v6
              with:
                  context: src/product-catalog
                  file: Dockerfile
                  push: true
                  tags: ${{ secrets.DOCKER_USERNAME }}/product-catalog:${{ github.run_id }}
    
    updateK8s:
        runs-on: ubuntu-latest
        needs: docker
        steps:
            - name: checkout code
              uses: actions/checkout@v4
              with:
                  token: ${{ secrets.GITHUB_TOKEN }}

            - name: Update tag in kubernetes deployment menifest
              run: |
                    sed -i 's/image: .*/image: ${{ secrets.DOCKER_USERNAME }}/product-catalog:${{ github.run_id }}/' kubernetes/productcatalog/deploy.yaml

            - name: Commit and push changers
              run: |
                git config --global user.name "${{secrets.GH_USER_NAME}}"
                git config --global user.email "${{secrets.GH_USER_EMAIL}}"
                git add kubernetes/productcatalog/deploy.yaml
                git commit -m "[CI]: Update image tag to ${{ github.run_id }}" || echo "No changes to commit"
                git push






Workflow Triggers

The workflow runs on every push or pull request to the main branch.
Jobs

There are four jobs: build, code-quality, docker, and updateK8s.

1. build
Runs on: Ubuntu latest.
Steps:
Checks out the repository code.
Sets up Go 1.22 environment.
Builds the Go application from src/product-catalog/main.go.
Runs unit tests for all packages under src/product-catalog.

2. code-quality
Runs on: Ubuntu latest.
Steps:
Checks out the repository code.
Installs and runs golangci-lint to check code quality and style for the Go code in src/product-catalog.

3. docker
Runs on: Ubuntu latest.
Needs: build job to complete first.
Steps:
Checks out the repository code.
Sets up Docker Buildx for advanced Docker builds.
Logs in to Docker Hub using credentials stored in GitHub Secrets.
Builds and pushes a Docker image for the product catalog service, tagging it with the current GitHub run ID.

4. updateK8s
Runs on: Ubuntu latest.
Needs: docker job to complete first.
Steps:
Checks out the repository code with a GitHub token.
Updates the image tag in the Kubernetes deployment manifest (kubernetes/productcatalog/deploy.yaml) to use the new Docker image.
Configures Git with user name and email from secrets.
Commits and pushes the updated manifest back to the repository (if there are changes).

Summary:
This workflow covers CI (build, test, lint) and CD (build Docker image, push to registry, update Kubernetes manifest, 
and push changes). Each job is responsible for a specific part of the pipeline, ensuring code quality and automating 
deployment.

